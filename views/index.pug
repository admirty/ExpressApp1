extends layout

block content
  h1= title
  p Welcome to #{title}
  p 支援距離感測 #{proximity}

  html
  head
    title Blinky POV and Blinky GRID Programming
    link(rel='stylesheet', type='text/css', href='drag.css')
    script(type='text/javascript', src='SOTC-DnDLists.js')
    script(type='text/javascript').
      var changeclolor=true;
      function handle_message_pixel(which)
      {
      message_data.push(make_config_byte(which, 0x80)); // pixel message has bit 7 = 1
      var columns = document.getElementById("msg_" + which + "_pixel_leds").getElementsByTagName("div");
      if (document.getElementById("msg_" + which + "_anim_anim").checked)
      num_data_bytes = 7 * Math.ceil(columns.length / 7);
      else
      num_data_bytes = columns.length;
      message_data.push(num_data_bytes);
      for (var c = 0; c < columns.length; c++)
      {
      var leds = columns[c].getElementsByTagName("img");
      var data = 0;
      for (var l = 0; l < leds.length; l++)
      {
      if (leds[l].src.indexOf("lit") != -1)
      {
      data |= (1 << (7-l)); // TODO here is where we figure out the endianness stuff, so check here if things are upside down or whatever
      }
      }
      message_data.push(data);
      }
      if (document.getElementById("msg_" + which + "_anim_anim").checked)
      { // for flashy mode, we have to pad out to even blocks of seven
      for (var i = 0; i < (7 - (columns.length % 7)) % 7; i++)
      message_data.push(0x00);
      }
      }
      // these two functions add byte values into the message_data
      // message config byte (byte 0 of each message):
      //  7       pixel=1, text=0
      //  6       flashy=1, marquee=0 (grid only)
      //  5-2     delay, low is fast, high is slow
      //  1-0     end type,
      // TODO are the foo=1, bar=0 items above accurate?
      // byte 1 is the number of data bytes
      function handle_message_text(which)
      {
      message_data.push(make_config_byte(which, 0x00)); // text message has bit 7 = 0
      font_table = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.!&?, ";
      var text = document.getElementById("msg_" + which + "_text_message").value.toUpperCase();
      var num_chars = 0;
      var this_data = Array();
      for (var i = 0; i < text.length; i++)
      {
      var c = font_table.indexOf(text[i]);
      if (c == -1)
      {
      alert("Invalid character detected in font message '" + which + "': '" + text[i] + "'. It will be ignored.");
      }
      else
      {
      this_data.push(c);
      num_chars++;
      }
      }
      message_data.push(num_chars);
      for (var i = 0; i < num_chars; i++)
      message_data.push(this_data[i]);
      }
      function start_blink()
      {
      //color = prompt("Enter the color you want on the Background???");
      //document.body.style.backgroundColor = color;
      //alert("eeeee");
      if (changeclolor){
      e = document.getElementById("divdata");
      e.style.backgroundColor = "white";
      }else{
      e = document.getElementById("divdata");
      e.style.backgroundColor = "black";
      }
      changeclolor=!changeclolor;
      }
      // this function is called by the "stop" button
      function stop_dump()
      {
      transmitting = 0;
      document.getElementById("progressImg").width = 0;
      document.getElementById("progressSpan").innerHTML = "Canceled";
      }
      // this function is called by the "go" button, and starts everything off
      function start_dump()
      {
      if (transmitting == 0) // not currently transmitting
      {
      current_clock = 0;
      message_data = Array();
      var num_messages = 0;
      var items = List.getElementsByTagName("div");
      for (var i = 0, n = items.length; i < n; i++)
      {
      var item = items[i];
      if (item.getAttribute("class") == "list")
      {
      var id = item.id.split("_")[1];
      if (document.getElementById("msg_" + id + "_type_text").checked)
      {
      // this is a text message - put bytes into message_data
      handle_message_text(id);
      }
      else
      {
      // this is a pixel message - put bytes into message_data
      handle_message_pixel(id);
      }
      document.getElementById("message_data").value = message_data;
      num_messages++;
      }
      }
      if (num_messages > 0)
      {
      // we found at least one message to transmit
      message_data.unshift(num_messages);
      document.getElementById("message_data").value = message_data;
      var hex = Array();
      for (var i = 0; i < message_data.length; i++)
      hex.push(dec2hex(message_data[i]));
      document.getElementById("message_data_hex").value = hex;
      wrap_messages(); // converts data from message_data to xmit_data
      document.getElementById("xmit_data").value = xmit_data;
      hex = Array();
      for (var i = 0; i < xmit_data.length; i++)
      hex.push(dec2hex(xmit_data[i]));
      document.getElementById("xmit_data_hex").value = hex;
      encode_xmit_data(); // converts data from xmit_data to 0/1 stored in xmit_raw
      document.getElementById("xmit_raw").value = xmit_raw;
      // do the actual blinking transmission
      index = 0;
      transmitting = 1;
      delay = document.getElementById("delay").value;
      setTimeout('set_data()', delay);
      }
      } // else we are currently transmitting, ignore the button press
      }
  body
    h1 Blinky POV and Blinky GRID Programming
    p
      | This webpage will let you design and upload new messages to your 
      a(href='http://www.wayneandlayne.com/projects/blinky/') Blinky POV
      |  or 
      a(href='http://www.wayneandlayne.com/projects/blinky/') Blinky GRID
      |  kit. First, you should create one or more messages in the first section below. Once your messages are prepared, section 2 below will let you transmit the new message(s) to your Blinky kit.
    #ie_message(style='display: none;')
      strong Internet Explorer users:
      |  The blinky programming website doesn't work with IE, so you need to use another browser. We've had great luck with Firefox and Chrome, along with the Android and iOS browsers. Sorry for the inconvenience!
      br
      a(href='http://www.mozilla.org/en-US/firefox/fx/')
        img(src='get_firefox.png', width='175', height='68', border='0')
      a(href='https://www.google.com/chrome')
        img(src='get_chrome.png', width='175', height='68', border='0')
    h2 1. Create Messages
    p
      | You can store multiple messages on your Blinky kit. Messages can be either text-based or pixel-based. Font-based messages take up much less memory than pixel-based messages. Marquee/Animation only matters on Blinky GRID. For delay, 0 is the fastest value and 15 is the slowest value. Drag the arrow icons to reorder your messages. Use the garbage can to remove a message.
    #list(style='position: relative; border: 1px solid white; width: 575px;')
    input(type='button', onclick='javascript: add_new_message();', value='Add New Message')
    // TODO add some buttons like "Add @" and "Add heart" eventually.
    script(type='text/javascript').
      load();
      add_new_message(); // start out with one message
      if (getInternetExplorerVersion() != -1)
      {
      document.getElementById("ie_message").style.display = "block";
      }
    h2 2. Programming
    p
      | Enter programming mode: Hold down the button while turning on the power switch. Release the button. Hold the Blinky up to the screen. Be sure to align the sensors correctly: The sensor labeled C points to clock, and D points to data. Press and release the button when you're ready to begin transmission. Press the Go button to start.
    p
      a(href='/files/blinky/images/programming_animated_gif/blinky_programming.gif')
        img(src='/files/blinky/images/programming_animated_gif/blinky_programming_crop.png', width='375px', height='194px', border='0')
        br
        strong Check out this awesome animated guide to programming!
    p
      strong Please note!
      |  On 2011/09/10 we switched the locations of the clock and data squares below to make it easier to hold the Blinky device while programming, based on customer feed back we have received over the past few months. This requires no change in the Blinky firmware, only a change in how you align the sensors on the screen. Please 
      a(href='/contact/') let us know
      |  if this change is a dealbreaker.
    div(style='width: 620px;')
      div(style='float: right; width: 301px; padding-left: 10px;')
        br
        div(style='width: 301px; height: 30px; border: 2px solid white; position: relative;')
          img#progressImg(src='progress_bar_30px_tall.png', height='30', width='1', style='position: absolute; top: 0; left: 0; z-index: -1;')
          div(style='padding: 5px;')
            | Progress: 
            span#progressSpan
        br
        table(border='0', cellspacing='2', cellpadding='2')
          tr
            td
              input(type='button', onclick='javascript:setInterval(start_blink, 300);', style='height: 50px; width: 60px; font-size: 100%; font-weight: bold;', value='Go')
            td
              input(type='button', onclick='javascript:stop_dump();', style='height: 50px; width: 60px; font-size: 100%; font-weight: bold;', value='Stop')
            td
              | Delay (ms):
              br
              input#delay(type='text', size='4', value='40')
      div(style='width: 301px; background-color: white; border: 2px solid white;')
        #divdata(style='width: 150px; height: 150px; background-color: black; float: right;') Data
        #divclock(style='width: 150px; height: 150px; background-color: black;') Clock
    h2 3. Troubleshooting
    p
      | For the delay value, smaller values equal quicker data transmissions, but too small/fast might cause errors! The smallest reliable value depends on your monitor, browser, and computer graphics hardware. Start with a value of 40, and make sure it can reliably transfer your messages. You can then gradually reduce the delay time until you start having invalid transmissions, indicated by alternating flashing of the third and fourth LEDs on your Blinky board. We've have good luck with values of 25-40 on various systems we've tested.
    p
      | During normal transmission, the second LED will flash once for each byte of data received. When the transmission is finished, the blinky should immediately start displaying your messages. The blinky data is transmitted as a series of one or more 
      em records
      | . After each record is transmitted, the blinky will double-check the data to make sure it was properly transmitted (using something called a 
      a(href='http://en.wikipedia.org/wiki/Checksum') checksum
      | ). If the checksum is invalid, meaning that there was a data transmission problem, the third and fourth LEDs on the blinky will flash rapidly in an alternating pattern. If this happens, press the Stop button, reset your blinky into the programming (bootloader) mode, and try again. If you continue to experience trouble, try increasing the value in the delay box and set your monitor's brightness to 100%. If nothing works, try the 
      a(href='/forum/') forums
      | .
    div(style='display: none;')
      hr
      strong Debug information:
      br
      | message_data:
      br
      textarea#message_data(cols='60', rows='5')
      br
      | message_data hex:
      br
      textarea#message_data_hex(cols='60', rows='5')
      br
      br
      | xmit_data:
      br
      textarea#xmit_data(cols='60', rows='5')
      br
      | xmit_data hex:
      br
      textarea#xmit_data_hex(cols='60', rows='5')
      br
      br
      br
      | xmit_raw:
      br
      textarea#xmit_raw(cols='60', rows='5')
